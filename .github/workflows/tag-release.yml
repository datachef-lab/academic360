name: Auto Tag Release

on:
  push:
    branches:
      - develop  # Runs only when pushing to develop

jobs:
  tag_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v1.0.0')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Extract Version Components
        id: extract-version
        run: |
          LATEST_TAG=${LATEST_TAG#v}  # Remove 'v' prefix
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          PATCH=${PATCH%-*}  # Remove any suffix (-alpha, -beta)
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV

      - name: Determine Version Type
        id: set-version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ "major" ]]; then
            echo "NEW_MAJOR=$((MAJOR + 1))" >> $GITHUB_ENV
            echo "NEW_MINOR=0" >> $GITHUB_ENV
            echo "NEW_PATCH=0" >> $GITHUB_ENV
          elif [[ "$COMMIT_MSG" =~ "minor" ]]; then
            echo "NEW_MAJOR=$MAJOR" >> $GITHUB_ENV
            echo "NEW_MINOR=$((MINOR + 1))" >> $GITHUB_ENV
            echo "NEW_PATCH=0" >> $GITHUB_ENV
          elif [[ "$COMMIT_MSG" =~ "patch" ]]; then
            echo "NEW_MAJOR=$MAJOR" >> $GITHUB_ENV
            echo "NEW_MINOR=$MINOR" >> $GITHUB_ENV
            echo "NEW_PATCH=$((PATCH + 1))" >> $GITHUB_ENV
          else
            echo "NEW_MAJOR=$MAJOR" >> $GITHUB_ENV
            echo "NEW_MINOR=$MINOR" >> $GITHUB_ENV
            echo "NEW_PATCH=$PATCH" >> $GITHUB_ENV
          fi

      - name: Define Pre-release Type
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ "alpha" ]]; then
            echo "VERSION_SUFFIX=-alpha" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" =~ "beta" ]]; then
            echo "VERSION_SUFFIX=-beta" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" =~ "release" ]]; then
            echo "VERSION_SUFFIX=" >> $GITHUB_ENV
          fi

      - name: Generate New Tag
        run: |
          NEW_TAG="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}${VERSION_SUFFIX}"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "New version: $NEW_TAG"

      - name: Configure Git User
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Create and Push Tag
        run: |
          git tag -a $NEW_TAG -m "Auto-generated tag: $NEW_TAG"
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
